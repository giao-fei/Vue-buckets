
一、什么叫导航守卫：
   导航守卫就是路由跳转过程中的一些钩子函数，再直白点路由跳转是一个大的过程，
   这个大的过程分为跳转前中后等等细小的过程，在每一个过程中都有一函数，
   这个函数能让你操作一些其他的事儿的时机，这就是导航守卫。
   笼统的说，导航守卫是控制用户能够进入哪些路由和不能进入哪些路由的控制器，也就是管理路由的.

二、导航守卫分为：全局导航守卫、路由独享导航守卫、组件内导航守卫(类似于生命周期函数)。

  1、【全局导航守卫】:他的特点是所有路由配置的组件都会触发，直白点就是触发路由就会触发这些钩子函数。他有以下三个步骤：(beforeEach、beforeResolve、afterEach)

       (1)、beforeEach：在路由跳转前触发，参数包括to,from,next（参数会单独介绍）三个，这个钩子作用主要是用于登录验证，也就是路由还没跳转提前告知，以免跳转了再通知就为时已晚。
             
                 const router = new Vue({....})
                 router.beforeEach((to, from, next) => {
                     .....
                 })
       (2)、afterEach：和beforeEach相反，他是在路由跳转完成后触发，参数包括to,from没有了next（参数会单独介绍）,他发生在beforeEach和beforeResolve之后，beforeRouteEnter（组件内守卫，后讲）之前。

  2、【路由独享的】是指在单个路由配置的时候也可以设置的钩子函数，其位置就是下面示例中的位置，也就是像Foo这样的组件都存在这样的钩子函数。目前他只有一个钩子函数(beforeEnter)：
   
                 const routes = [
                     {
                        path: './login',
                        component: LOG
                     },
                     beforeEnter: (to, from, next) => {
                         ......
                     }
                 ]
            
  3、【组件类导航守卫】: 是指在组件内执行的钩子函数，类似于组件内的生命周期，相当于为配置路由的组件添加的生命周期钩子函数。(beforeRouterEnter、beforeRouteUpdate、beforeRouteLeave)
 
       (1)、[beforeRouteEnter]：路由进入之前调用，参数包括to，from，next。
                   该钩子在全局守卫beforeEach和独享守卫beforeEnter之后，全局beforeResolve和全局afterEach之前调用，要注意的是该守卫内访问不到组件的实例，也就是this为undefined，
                   也就是他在beforeCreate生命周期前触发。在这个钩子函数中，可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数，
                   可以在这个守卫中请求服务端获取数据，当成功获取并能进入路由时，调用next并在回调中通过 vm访问组件实例进行赋值等操作，（next中函数的调用在mounted之后：
                   为了确保能对组件实例的完整访问）。

       (2)、[beforeRouteUpdate] (v 2.2+)：在当前路由改变时，并且该组件被复用时调用，可以通过this访问实例。

       (3)、[beforeRouteLeave]：导航离开该组件的对应路由时调用，可以访问组件实例this，参数包括to，from，next。 
             export default{
               data(){
                //...
               },
               beforeRouteEnter (to, from, next) {
                // 在渲染该组件的对应路由被 confirm 前调用
                // 不！能！获取组件实例 `this`
                // 因为当守卫执行前，组件实例还没被创建
                },
               beforeRouteUpdate (to, from, next) {
                // 在当前路由改变，但是该组件被复用时调用
                // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
                // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
                // 可以访问组件实例 `this`
                },
               beforeRouteLeave (to, from, next) {
                // 导航离开该组件的对应路由时调用
                // 可以访问组件实例 `this`
                }
               }     